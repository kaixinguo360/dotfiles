#!/bin/sh

# Default Params #
LOG1=       # Log Leve 1
LOG2=yes    # Log Leve 2
DRY_RUN=yes
TARGET_DIRNAME=
NO_SKIP=

# Extract Extension #
IS_EXTRACT_EXT=
DEFAULT_EXT=

# Pattern String #
NAME_PATTERN='$s_name'
COMMAND_PATTERN='mv \"$s_path\" \"$t_path\"'

# -----------------------------
# s_path(path)=/mnt/foo/a.out
# -----------------------------
# s_fullname(full,fullname)=a.out
# s_basename(base,basename)=a
# s_dirname(dir,dirname)=/mnt/foo
# s_extname(ext,extname)=out
# -----------------------------
# IS_EXTRACT_EXT=(true)
# s_name(name)=a
# -----------------------------
# IS_EXTRACT_EXT=(false)
# s_name(name)=a.out
# -----------------------------

# Utils functions #
url() { urldecode "$s_basename"; }
sha() { sha1sum "$s_path"|cut -d ' ' -f1; }
md5() { md5sum "$s_path"|cut -d ' ' -f1; }

# Log functions #
log() { echo "$1"|sed 's/%/%%/g'|xargs -i printf {}; echo; }
log_debug() { [ -n "$LOG1" ] && log "\033[34m[DEBUG] $1\033[0m" >&2; }
log_info() { [ -n "$LOG2" ] && log "[INFO] $1"; }
log_warn() { [ -n "$LOG2" ] && log "\033[33m[WARN] $1\033[0m" >&2; }
log_error() { [ -n "$LOG2" ] && log "\033[31m[ERROR] $1\033[0m" >&2; }

# Generate Target Name #
gen_target_name() {
    t_basename=$(eval echo $(echo "$NAME_PATTERN" \
        | sed 's#{\(url\|md5\|sha\)}#$(\1)#g' \
        | sed 's#\(%[0-9]*d\)#$(printf \1 $index)#g' \
        | sed 's#{}#{name}#g' \
        | sed 's#{\(full\|base\|dir\|ext\)}#{\1name}#g' \
        | sed 's#{\([^{}]*\)}#${s_\1}#g' \
    ))
}

# Main #
main() {

    index=$((index+1))

    [ -f "$1" ] || {
        log_error "Not a regular file: $1"
        return 1
    }

    # ---- begin ---- #
    s_path=$(realpath -s "$1")
    s_dirname=${s_path%/*}
    s_fullname=${s_path##*/}
    s_basename=${s_fullname%.*}
    
    # Get s_extname
    has_ext="$(echo $s_fullname|grep '\.')"
    if [ -n "$has_ext" ]; then
        s_extname=${s_fullname##*.}
    else
        s_extname=''
    fi

    if [ -n "$IS_EXTRACT_EXT" -a -n "$has_ext" ] || [ -n "$DEFAULT_EXT" ]; then
        s_extname=${s_fullname##*.}
        s_name=${s_fullname%.*}
        gen_target_name
        t_extname=${DEFAULT_EXT:-$s_extname}
        t_fullname=$t_basename.$t_extname
    else
        s_name=$s_fullname
        gen_target_name
        t_extname=''
        t_fullname=$t_basename
    fi

    t_name=${t_basename}
    t_dirname=${TARGET_DIRNAME:-$s_dirname}
    t_path=$t_dirname/$t_fullname
    # ---- end ---- #

    # Warn: Source and target are same file
    [ "$s_path" = "$t_path" -a -z "$NO_SKIP" ] && {
        log_warn "Skip no change file: $s_path" >&2
        return 0
    }

    # Generate cmd
    cmd=$(eval echo $(echo "$COMMAND_PATTERN" \
        | sed 's#{\(url\|md5\|sha\)}#$(\1)#g' \
        | sed 's#\(%[0-9]*d\)#$(printf \1 $index)#g' \
        | sed 's#{\(s\|source\)}#{s_path}#g' \
        | sed 's#{\(t\|target\)}#{t_path}#g' \
        | sed 's#{\([^{}]*\)}#\\"${\1}\\"#g' \
    ))

    # Dry run
    [ -n "$DRY_RUN" ] && {
        log_info "\033[32m$cmd\033[0m"
        return 0
    }

    # Exec $cmd
    [ -n "$LOG2" ] && log_info "\033[32m+ $cmd\033[0m"
    eval $cmd && {
        return 0
    } || {
        log_error "$cmd"
        return 1
    }
}

# Process flags #
TEMP=`getopt \
    -o fe::qvc:n:i: \
    -l force,ext::,quiet,verbose,command:,name:,no-skip,index: \
    -n "${0##*/}" \
    -- "$@"` || exit 1
eval set -- "$TEMP"
while true
do
    case "$1" in
        -f|--force) unset DRY_RUN; shift;;
        -e|--ext) IS_EXTRACT_EXT=yes; DEFAULT_EXT=$2; shift 2;;
        -q|--quiet) unset LOG1 LOG2; shift;;
        -v|--verbose) LOG1=yes; LOG2=yes; shift;;
        -n|--name) NAME_PATTERN=$2; shift 2;;
        -c|--command) COMMAND_PATTERN=$2; shift 2;;
        --no-skip) NO_SKIP=yes; shift;;
        -i|--index) index=$2; shift 2;;
        --) shift; break;;
        *) echo "Unkown argument: $1"; exit 1;;
    esac
done

[ -n "$DRY_RUN" ] && log_info "Starting a dry run without changes..."

index=${index:-1}
index=$((index-1))

log_debug "DRY_RUN=$DRY_RUN"
log_debug "TARGET_DIRNAME=$TARGET_DIRNAME"
log_debug "IS_EXTRACT_EXT=$IS_EXTRACT_EXT"
log_debug "DEFAULT_EXT=$DEFAULT_EXT"
log_debug "COMMAND_PATTERN=$COMMAND_PATTERN"
log_debug "NAME_PATTERN=$NAME_PATTERN"

if [ -n "$*" ]; then
    #read arguments
    for arg in "$@"
    do
        main "$arg"
    done
else
    #interactive
    while read -e -p "> " input
    do
        history -s "$input"
        main "$input"
    done
fi

[ -n "$DRY_RUN" ] && log_info "No changes to your files done, use -f to finally apply the changes."
